(lp0
ccopy_reg
_reconstructor
p1
(c__main__
Hit
p2
c__builtin__
object
p3
Ntp4
Rp5
(dp6
S'category'
p7
S'buffer'
p8
sS'end'
p9
I224
sS'name'
p10
S'strcpy'
p11
sS'parameters'
p12
(lp13
S''
p14
aS'buffer'
p15
aS'str'
p16
asS'level'
p17
I4
sS'url'
p18
g14
sS'column'
p19
I2
sS'context_text'
p20
S'\tstrcpy(buffer, str);'
p21
sS'hook'
p22
c__main__
c_buffer
p23
sS'warning'
p24
S'Does not check for buffer overflows when copying to destination [MS-banned] (CWE-120)'
p25
sS'suggestion'
p26
S'Consider using snprintf, strcpy_s, or strlcpy (warning: strncpy easily misused)'
p27
sS'line'
p28
I10
sS'filename'
p29
S'Buffer-Overflow-Attack-master/Code/stack.c'
p30
sS'start'
p31
I218
sbag1
(g2
g3
Ntp32
Rp33
(dp34
g7
g8
sg29
g30
sg9
I142
sg10
S'char'
p35
sg12
(lp36
sg17
I2
sg18
g14
sS'lookahead'
p37
S'char buffer[100];\n\t/* The following statement has a buffer overflow problem */\n\tstrcpy(buffer, str);\n\treturn 1;\n}\n\nint main(int argc, char **argv)\n{\n\tchar str[400];\n\tFILE *badfile;\n\n\tbadfile = fopen("badfile", "r");\n\tfread(str, sizeof(char), 300, badfile);\n\tfoo(str);\n\n\tprintf("Returned Properly\\n");\n\treturn 1;\n}\n'
p38
sg19
I2
sg20
S'\tchar buffer[100];'
p39
sg22
c__main__
c_static_array
p40
sg24
S'Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120)'
p41
sg26
S'Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length'
p42
sg28
I8
sS'extract_lookahead'
p43
I1
sg31
I138
sbag1
(g2
g3
Ntp44
Rp45
(dp46
g7
g8
sg29
g30
sg9
I292
sg10
S'char'
p47
sg12
(lp48
sg17
I2
sg18
g14
sg37
S'char str[400];\n\tFILE *badfile;\n\n\tbadfile = fopen("badfile", "r");\n\tfread(str, sizeof(char), 300, badfile);\n\tfoo(str);\n\n\tprintf("Returned Properly\\n");\n\treturn 1;\n}\n'
p49
sg19
I2
sg20
S'\tchar str[400];'
p50
sg22
g40
sg24
g41
sg26
g42
sg28
I16
sg43
I1
sg31
I288
sbag1
(g2
g3
Ntp51
Rp52
(dp53
g7
S'misc'
p54
sg9
I336
sg10
S'fopen'
p55
sg12
(lp56
g14
aS'"badfile"'
p57
aS'"r"'
p58
asg17
I2
sg18
g14
sg19
I12
sg20
S'\tbadfile = fopen("badfile", "r");'
p59
sg22
c__main__
normal
p60
sg24
S'Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents? (CWE-362)'
p61
sg26
g14
sg28
I19
sg29
g30
sg31
I331
sbag1
(g2
g3
Ntp62
Rp63
(dp64
g7
S'format'
p65
sg9
I46
sg10
S'printf'
p66
sg12
(lp67
g14
aS'" :: a1\xe2\x80\x99s address is 0x%x \\n"'
p68
aS'(unsigned int) &a1'
p69
asg17
I0
sg18
g14
sg19
I1
sg20
S'printf(" :: a1\xe2\x80\x99s address is 0x%x \\n", (unsigned int) &a1);'
p70
sS'note'
p71
S'Constant format string, so not considered risky.'
p72
sg22
c__main__
c_printf
p73
sg24
S'If format strings can be influenced by an attacker, they can be exploited (CWE-134)'
p74
sg26
S'Use a constant for the format specification'
p75
sg28
I4
sg29
S'Buffer-Overflow-Attack-master/Code/prog.c'
p76
sg31
I40
sbag1
(g2
g3
Ntp77
Rp78
(dp79
g7
S'input'
p80
sg9
I360
sg10
S'fread'
p81
sg12
(lp82
g14
aS'str'
p83
aS'sizeof(char)'
p84
aS'300'
p85
aS'badfile'
p86
asg17
I0
sg18
g14
sg19
I2
sg20
S'\tfread(str, sizeof(char), 300, badfile);'
p87
sg22
g60
sg24
S'Function accepts input from outside program (CWE-20)'
p88
sg26
S'Make sure input data is filtered, especially if an attacker could manipulate it'
p89
sg80
I1
sg28
I20
sg29
g30
sg31
I355
sbag1
(g2
g3
Ntp90
Rp91
(dp92
g7
g65
sg9
I414
sg10
S'printf'
p93
sg12
(lp94
g14
aS'"Returned Properly\\n"'
p95
asg17
I0
sg18
g14
sg19
I2
sg20
S'\tprintf("Returned Properly\\n");'
p96
sg71
g72
sg22
g73
sg24
g74
sg26
g75
sg28
I23
sg29
g30
sg31
I408
sba.